{"version":3,"sources":["components/VisualData.js","components/Options.js","App.js","serviceWorker.js","index.js"],"names":["VisualData","data","Options","props","type","numbers","onChange","handleNumberChange","sortingActive","onClick","handleNumberSubmit","id","name","handleSortTypeChange","htmlFor","handleSortSpeedChange","handleStop","handleSortSubmit","handleReset","App","event","setState","target","value","sortType","sortSpeed","generateRandomNum","range","Math","floor","random","labels","dataset","i","state","rnd","push","toString","beforeSort","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","handlePause","sortingPaused","sortCheck","mySortResult","dataCopy","slice","length","jsSort","sort","a","b","Error","animateSwaps","orderedSwaps","cntr","ms","setTimeout","visualize","e","console","error","bgColors","brdrColors","hBgColors","hBrdrColors","j","temp","min","ndx","arrLength","swap","hRoot","left","right","max","heapSort","current","sortedNdx","merge","result","leftNdx","rightNdx","last","concat","mergeSort","middle","quickSort","initialArr","newArr","newInit","pivot","pop","forEach","v","includes","this","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d83fc8e8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nconst VisualData = ({ data }) => {\r\n  return (\r\n    <div>\r\n      <h2>Visual Sort</h2>\r\n      <Bar data={data} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VisualData;\r\n","import React from \"react\";\r\n\r\nconst Options = ({ ...props }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <label>\r\n          Number:\r\n          <input\r\n            type=\"text\"\r\n            numbers={props.numbers}\r\n            onChange={props.handleNumberChange}\r\n          />\r\n          {!props.sortingActive && (\r\n            <button onClick={props.handleNumberSubmit}>New Data</button>\r\n          )}\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <label>\r\n          Sort:\r\n          <input\r\n            type=\"radio\"\r\n            id=\"bubbleSort\"\r\n            name=\"sortType\"\r\n            onChange={props.handleSortTypeChange}\r\n          />\r\n          <label htmlFor=\"bubbleSort\">Bubble Sort</label>\r\n          <input\r\n            type=\"radio\"\r\n            id=\"selectionSort\"\r\n            name=\"sortType\"\r\n            onChange={props.handleSortTypeChange}\r\n          />\r\n          <label htmlFor=\"selectionSort\">Selection Sort</label>\r\n          <input\r\n            type=\"radio\"\r\n            id=\"insertionSort\"\r\n            name=\"sortType\"\r\n            onChange={props.handleSortTypeChange}\r\n          />\r\n          <label htmlFor=\"insertionSort\">Insertion Sort</label>\r\n          <input\r\n            type=\"radio\"\r\n            id=\"heapSort\"\r\n            name=\"sortType\"\r\n            onChange={props.handleSortTypeChange}\r\n          />\r\n          <label htmlFor=\"heapSort\">Heap Sort</label>\r\n          <input\r\n            type=\"radio\"\r\n            id=\"mergeSort\"\r\n            name=\"sortType\"\r\n            onChange={props.handleSortTypeChange}\r\n          />\r\n          <label htmlFor=\"mergeSort\">Merge Sort</label>\r\n          <input\r\n            type=\"radio\"\r\n            id=\"quickSort\"\r\n            name=\"sortType\"\r\n            onChange={props.handleSortTypeChange}\r\n          />\r\n          <label htmlFor=\"quickSort\">Quick Sort</label>\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <label>\r\n          Speed:\r\n          <input\r\n            type=\"radio\"\r\n            id=\"slowSort\"\r\n            name=\"sortSpeed\"\r\n            onChange={props.handleSortSpeedChange}\r\n          />\r\n          <label htmlFor=\"slowSort\">Slow</label>\r\n          <input\r\n            type=\"radio\"\r\n            id=\"fastSort\"\r\n            name=\"sortSpeed\"\r\n            onChange={props.handleSortSpeedChange}\r\n          />\r\n          <label htmlFor=\"fastSort\">Fast</label>\r\n          <input\r\n            type=\"radio\"\r\n            id=\"fastestSort\"\r\n            name=\"sortSpeed\"\r\n            onChange={props.handleSortSpeedChange}\r\n          />\r\n          <label htmlFor=\"fastSort\">Fastest</label>\r\n          {!props.sortingActive ? (\r\n            <div>\r\n              <button onClick={props.handleSortSubmit}>Sort!</button>\r\n              <button onClick={props.handleReset}>Reset</button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <button onClick={props.handleStop}>Stop</button>\r\n            </div>\r\n          )}\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Options;\r\n","/* eslint-disable no-loop-func */\r\nimport React, { Component } from \"react\";\r\nimport VisualData from \"./components/VisualData\";\r\nimport Options from \"./components/Options\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      numbers: 0,\r\n      beforeSort: [],\r\n      sortType: \"\",\r\n      sortSpeed: \"\",\r\n      sortingActive: false,\r\n      sortingPaused: false,\r\n      data: {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: \"Data\",\r\n            backgroundColor: \"rgba(0,102,128,0.2)\",\r\n            borderColor: \"rgba(0,102,128,1)\",\r\n            borderWidth: 1,\r\n            hoverBackgroundColor: \"rgba(0,102,128,0.4)\",\r\n            hoverBorderColor: \"rgba(0,102,128,1)\",\r\n            data: []\r\n          }\r\n        ]\r\n      }\r\n    };\r\n  }\r\n\r\n  handleNumberChange = event => {\r\n    this.setState({ numbers: event.target.value });\r\n  };\r\n\r\n  handleSortTypeChange = event => {\r\n    this.setState({ sortType: event.target.id });\r\n  };\r\n\r\n  handleSortSpeedChange = event => {\r\n    this.setState({ sortSpeed: event.target.id });\r\n  };\r\n\r\n  generateRandomNum = range => {\r\n    return Math.floor(Math.random() * range) + 1;\r\n  };\r\n\r\n  handleNumberSubmit = () => {\r\n    let labels = [];\r\n    let dataset = [];\r\n    for (let i = 0; i < this.state.numbers; i++) {\r\n      let rnd = this.generateRandomNum(1000);\r\n      labels.push(rnd.toString());\r\n      dataset.push(rnd);\r\n    }\r\n    this.setState({\r\n      beforeSort: dataset,\r\n      data: {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            ...this.state.data.datasets[0],\r\n            label: \"Data\",\r\n            data: dataset\r\n          }\r\n        ]\r\n      }\r\n    });\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      data: {\r\n        labels: this.state.beforeSort,\r\n        datasets: [\r\n          {\r\n            label: \"Data\",\r\n            backgroundColor: \"rgba(0,102,128,0.2)\",\r\n            borderColor: \"rgba(0,102,128,1)\",\r\n            borderWidth: 1,\r\n            hoverBackgroundColor: \"rgba(0,102,128,0.4)\",\r\n            hoverBorderColor: \"rgba(0,102,128,1)\",\r\n            data: this.state.beforeSort\r\n          }\r\n        ]\r\n      }\r\n    });\r\n  };\r\n\r\n  handlePause = () => {\r\n    this.setState({ sortingPaused: true });\r\n  };\r\n\r\n  handleStop = () => {\r\n    this.handlePause();\r\n    this.handleReset();\r\n  };\r\n\r\n  sortCheck = (data, mySortResult) => {\r\n    let dataCopy = data.slice();\r\n    if (dataCopy.length <= 1) return;\r\n\r\n    let jsSort = dataCopy.sort((a, b) => a - b);\r\n    for (let i = 0; i < dataCopy.length; i++) {\r\n      if (jsSort[i] !== mySortResult[i])\r\n        throw new Error(\"Implementation result does not match JS sort result\");\r\n    }\r\n  };\r\n\r\n  animateSwaps = (sortType, orderedSwaps, cntr, ms) => {\r\n    switch (sortType) {\r\n      case \"mergeSort\":\r\n      case \"quickSort\":\r\n        if (!this.state.sortingPaused) {\r\n          this.setState({\r\n            sortingActive: true,\r\n            data: orderedSwaps[cntr]\r\n          });\r\n          cntr++;\r\n          if (cntr < orderedSwaps.length) {\r\n            setTimeout(\r\n              () => this.animateSwaps(sortType, orderedSwaps, cntr, ms),\r\n              ms\r\n            );\r\n          } else {\r\n            this.setState({ sortingActive: false });\r\n          }\r\n        } else {\r\n          this.setState({ sortingActive: false, sortingPaused: false });\r\n        }\r\n        break;\r\n      default:\r\n        if (!this.state.sortingPaused) {\r\n          this.setState({\r\n            sortingActive: true,\r\n            data: {\r\n              labels: orderedSwaps[cntr],\r\n              datasets: [\r\n                {\r\n                  ...this.state.data.datasets[0],\r\n                  data: orderedSwaps[cntr]\r\n                }\r\n              ]\r\n            }\r\n          });\r\n          cntr++;\r\n          if (cntr < orderedSwaps.length) {\r\n            setTimeout(\r\n              () => this.animateSwaps(sortType, orderedSwaps, cntr, ms),\r\n              ms\r\n            );\r\n          } else {\r\n            this.setState({ sortingActive: false });\r\n          }\r\n        } else {\r\n          this.setState({ sortingActive: false, sortingPaused: false });\r\n        }\r\n        break;\r\n    }\r\n  };\r\n\r\n  visualize = (data, sortType, orderedSwaps, ms) => {\r\n    this.animateSwaps(sortType, orderedSwaps, 0, ms);\r\n    try {\r\n      if (sortType === \"mergeSort\" || sortType === \"quickSort\") {\r\n        this.sortCheck(\r\n          data,\r\n          orderedSwaps[orderedSwaps.length - 1].datasets[0].data\r\n        );\r\n      } else this.sortCheck(data, orderedSwaps[orderedSwaps.length - 1]);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  handleSortSubmit = () => {\r\n    const { sortSpeed, sortType } = this.state;\r\n    const { data } = this.state.data.datasets[0];\r\n    let dataCopy = data.slice();\r\n    let ms = 0;\r\n    let bgColors = [];\r\n    let brdrColors = [];\r\n    let hBgColors = [];\r\n    let hBrdrColors = [];\r\n    let orderedSwaps = [];\r\n\r\n    if (dataCopy.length <= 1) return;\r\n\r\n    switch (sortSpeed) {\r\n      case \"slowSort\":\r\n        ms = 1000;\r\n        break;\r\n      case \"fastSort\":\r\n        ms = 100;\r\n        break;\r\n      case \"fastestSort\":\r\n        ms = 1;\r\n        break;\r\n      default:\r\n        ms = 1;\r\n        break;\r\n    }\r\n\r\n    switch (sortType) {\r\n      case \"bubbleSort\":\r\n        for (let i = 0; i < dataCopy.length; i++) {\r\n          for (let j = 0; j < dataCopy.length; j++) {\r\n            if (dataCopy[j] > dataCopy[j + 1]) {\r\n              let temp = dataCopy[j];\r\n              dataCopy[j] = dataCopy[j + 1];\r\n              dataCopy[j + 1] = temp;\r\n              orderedSwaps.push(dataCopy.slice());\r\n            }\r\n          }\r\n        }\r\n        orderedSwaps.push(dataCopy.slice());\r\n        this.visualize(data, sortType, orderedSwaps, ms);\r\n        break;\r\n\r\n      case \"selectionSort\":\r\n        for (let i = 0; i < dataCopy.length; i++) {\r\n          let min = dataCopy[i];\r\n          let ndx = i;\r\n          for (let j = i; j < dataCopy.length; j++) {\r\n            if (dataCopy[j] < min) {\r\n              min = dataCopy[j];\r\n              ndx = j;\r\n            }\r\n          }\r\n          let temp = dataCopy[i];\r\n          dataCopy[i] = min;\r\n          dataCopy[ndx] = temp;\r\n          orderedSwaps.push(dataCopy.slice());\r\n        }\r\n        this.visualize(data, sortType, orderedSwaps, ms);\r\n        break;\r\n\r\n      case \"heapSort\":\r\n        let arrLength;\r\n        let i;\r\n\r\n        const swap = (dataCopy, i, j) => {\r\n          const temp = dataCopy[i];\r\n          dataCopy[i] = dataCopy[j];\r\n          dataCopy[j] = temp;\r\n        };\r\n\r\n        const hRoot = (dataCopy, i) => {\r\n          let left = 2 * i + 1;\r\n          let right = 2 * i + 2;\r\n          let max = i;\r\n\r\n          if (left < arrLength && dataCopy[left] > dataCopy[max]) max = left;\r\n\r\n          if (right < arrLength && dataCopy[right] > dataCopy[max]) max = right;\r\n\r\n          if (max !== i) {\r\n            swap(dataCopy, i, max);\r\n            orderedSwaps.push(dataCopy.slice());\r\n            hRoot(dataCopy, max);\r\n          }\r\n        };\r\n\r\n        const heapSort = dataCopy => {\r\n          arrLength = dataCopy.length;\r\n\r\n          for (i = Math.floor(arrLength / 2); i >= 0; --i) hRoot(dataCopy, i);\r\n\r\n          for (i = dataCopy.length - 1; i > 0; i--) {\r\n            swap(dataCopy, 0, i);\r\n            orderedSwaps.push(dataCopy.slice());\r\n            arrLength--;\r\n\r\n            hRoot(dataCopy, 0);\r\n          }\r\n        };\r\n\r\n        heapSort(dataCopy);\r\n        this.visualize(data, sortType, orderedSwaps, ms);\r\n        break;\r\n\r\n      case \"insertionSort\":\r\n        for (let i = 1; i < dataCopy.length; i++) {\r\n          let current = dataCopy[i];\r\n          let sortedNdx = i - 1;\r\n          while (dataCopy[sortedNdx] > current && sortedNdx >= 0) {\r\n            dataCopy[sortedNdx + 1] = dataCopy[sortedNdx];\r\n            orderedSwaps.push(dataCopy.slice());\r\n            sortedNdx--;\r\n          }\r\n          dataCopy[sortedNdx + 1] = current;\r\n          orderedSwaps.push(dataCopy.slice());\r\n        }\r\n        this.visualize(data, sortType, orderedSwaps, ms);\r\n        break;\r\n\r\n      case \"mergeSort\":\r\n        const mergeSort = dataCopy => {\r\n          if (dataCopy.length <= 1) {\r\n            return dataCopy;\r\n          }\r\n\r\n          const middle = Math.floor(dataCopy.length / 2);\r\n\r\n          const left = dataCopy.slice(0, middle);\r\n          //console.log(\"left:\", left);\r\n          orderedSwaps.push({\r\n            labels: left,\r\n            datasets: [\r\n              {\r\n                label: \"Left\",\r\n                backgroundColor: \"rgba(0, 102, 255, 0.2)\",\r\n                borderColor: \"rgba(0, 102, 255,1)\",\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: \"rgba(0, 102, 255,0.4)\",\r\n                hoverBorderColor: \"rgba(0, 102, 255,1)\",\r\n                data: left\r\n              }\r\n            ]\r\n          });\r\n          const right = dataCopy.slice(middle);\r\n          //console.log(\"right:\", right);\r\n          orderedSwaps.push({\r\n            labels: right,\r\n            datasets: [\r\n              {\r\n                label: \"Right\",\r\n                backgroundColor: \"rgba(0, 102, 0, 0.2)\",\r\n                borderColor: \"rgba(0, 102, 0,1)\",\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: \"rgba(0, 102, 0,0.4)\",\r\n                hoverBorderColor: \"rgba(0, 102, 0,1)\",\r\n                data: right\r\n              }\r\n            ]\r\n          });\r\n\r\n          return merge(mergeSort(left), mergeSort(right));\r\n        };\r\n\r\n        const merge = (left, right) => {\r\n          let result = [],\r\n            leftNdx = 0,\r\n            rightNdx = 0;\r\n\r\n          while (leftNdx < left.length && rightNdx < right.length) {\r\n            if (left[leftNdx] < right[rightNdx]) {\r\n              result.push(left[leftNdx]);\r\n              leftNdx++;\r\n            } else {\r\n              result.push(right[rightNdx]);\r\n              rightNdx++;\r\n            }\r\n          }\r\n\r\n          let last = result\r\n            .concat(left.slice(leftNdx))\r\n            .concat(right.slice(rightNdx));\r\n          //console.log(\"merged:\", last);\r\n\r\n          orderedSwaps.push({\r\n            labels: last,\r\n            datasets: [\r\n              {\r\n                label: \"Merged\",\r\n                backgroundColor: \"rgba(0, 102, 128, 0.2)\",\r\n                borderColor: \"rgba(0, 102, 128, 1)\",\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: \"rgba(0, 102, 128, 0.4)\",\r\n                hoverBorderColor: \"rgba(0, 102, 128, 1)\",\r\n                data: last\r\n              }\r\n            ]\r\n          });\r\n\r\n          return last;\r\n        };\r\n        mergeSort(dataCopy);\r\n        this.visualize(data, sortType, orderedSwaps, ms);\r\n        break;\r\n\r\n      case \"quickSort\":\r\n        const quickSort = dataCopy => {\r\n          let initialArr = dataCopy.slice();\r\n          if (dataCopy.length <= 1) {\r\n            return dataCopy;\r\n          } else {\r\n            let left = [];\r\n            let right = [];\r\n            let newArr = [];\r\n            let newInit = [];\r\n            let pivot = dataCopy.pop();\r\n\r\n            //console.log(\"pivot:\", pivot);\r\n\r\n            for (let i = 0; i < dataCopy.length; i++) {\r\n              // BEFORE SWAP: highlight pivot and number being compared (dataCopy[i])\r\n              initialArr.forEach(v => {\r\n                if (v === pivot || v === dataCopy[i]) {\r\n                  bgColors.push(\"rgba(255,99,132,0.2)\");\r\n                  brdrColors.push(\"rgba(255,99,132,1)\");\r\n                  hBgColors.push(\"rgba(255,99,132,0.4)\");\r\n                  hBrdrColors.push(\"rgba(255,99,132,1)\");\r\n                } else {\r\n                  bgColors.push(\"rgba(0,102,128,0.2)\");\r\n                  brdrColors.push(\"rgba(0,102,128,1)\");\r\n                  hBgColors.push(\"rgba(0,102,128,0.4)\");\r\n                  hBrdrColors.push(\"rgba(0,102,128,1)\");\r\n                }\r\n              });\r\n\r\n              orderedSwaps.push({\r\n                labels: initialArr,\r\n                datasets: [\r\n                  {\r\n                    label: \"Data (Comparison w/ Pivot)\",\r\n                    backgroundColor: bgColors,\r\n                    borderColor: brdrColors,\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: hBgColors,\r\n                    hoverBorderColor: hBrdrColors,\r\n                    data: initialArr\r\n                  }\r\n                ]\r\n              });\r\n\r\n              bgColors = [];\r\n              brdrColors = [];\r\n              hBgColors = [];\r\n              hBrdrColors = [];\r\n              // BEFORE SWAP: highlight pivot and number being compared (dataCopy[i])\r\n\r\n              if (dataCopy[i] <= pivot) {\r\n                left.push(dataCopy[i]);\r\n                //console.log(\"left:\", left);\r\n                newInit = newArr.concat(left, pivot, right);\r\n\r\n                newInit.forEach(v => {\r\n                  if (v === pivot) {\r\n                    bgColors.push(\"rgba(255,99,132,0.2)\");\r\n                    brdrColors.push(\"rgba(255,99,132,1)\");\r\n                    hBgColors.push(\"rgba(255,99,132,0.4)\");\r\n                    hBrdrColors.push(\"rgba(255,99,132,1)\");\r\n                  } else if (v === dataCopy[i] || left.includes(v)) {\r\n                    bgColors.push(\"rgba(0, 102, 255,0.2)\");\r\n                    brdrColors.push(\"rgba(0, 102, 255,1)\");\r\n                    hBgColors.push(\"rgba(0, 102, 255,0.4)\");\r\n                    hBrdrColors.push(\"rgba(0, 102, 255,1)\");\r\n                  } else if (right.includes(v)) {\r\n                    bgColors.push(\"rgba(0, 102, 0,0.2)\");\r\n                    brdrColors.push(\"rgba(0, 102, 0,1)\");\r\n                    hBgColors.push(\"rgba(0, 102, 0,0.4)\");\r\n                    hBrdrColors.push(\"rgba(0, 102, 0,1)\");\r\n                  } else {\r\n                    bgColors.push(\"rgba(0,102,128,0.2)\");\r\n                    brdrColors.push(\"rgba(0,102,128,1)\");\r\n                    hBgColors.push(\"rgba(0,102,128,0.4)\");\r\n                    hBrdrColors.push(\"rgba(0,102,128,1)\");\r\n                  }\r\n                });\r\n\r\n                orderedSwaps.push({\r\n                  labels: newInit,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Swapped to Left of Pivot\",\r\n                      backgroundColor: bgColors,\r\n                      borderColor: brdrColors,\r\n                      borderWidth: 1,\r\n                      hoverBackgroundColor: hBgColors,\r\n                      hoverBorderColor: hBrdrColors,\r\n                      data: newInit\r\n                    }\r\n                  ]\r\n                });\r\n\r\n                bgColors = [];\r\n                brdrColors = [];\r\n                hBgColors = [];\r\n                hBrdrColors = [];\r\n              } else {\r\n                right.push(dataCopy[i]);\r\n                //console.log(\"right:\", right);\r\n                newInit = newArr.concat(left, pivot, right);\r\n\r\n                newInit.forEach(v => {\r\n                  if (v === pivot) {\r\n                    bgColors.push(\"rgba(255,99,132,0.2)\");\r\n                    brdrColors.push(\"rgba(255,99,132,1)\");\r\n                    hBgColors.push(\"rgba(255,99,132,0.4)\");\r\n                    hBrdrColors.push(\"rgba(255,99,132,1)\");\r\n                  } else if (left.includes(v)) {\r\n                    bgColors.push(\"rgba(0, 102, 255,0.2)\");\r\n                    brdrColors.push(\"rgba(0, 102, 255,1)\");\r\n                    hBgColors.push(\"rgba(0, 102, 255,0.4)\");\r\n                    hBrdrColors.push(\"rgba(0, 102, 255,1)\");\r\n                  } else if (v === dataCopy[i] || right.includes(v)) {\r\n                    bgColors.push(\"rgba(0, 102, 0,0.2)\");\r\n                    brdrColors.push(\"rgba(0, 102, 0,1)\");\r\n                    hBgColors.push(\"rgba(0, 102, 0,0.4)\");\r\n                    hBrdrColors.push(\"rgba(0, 102, 0,1)\");\r\n                  } else {\r\n                    bgColors.push(\"rgba(0,102,128,0.2)\");\r\n                    brdrColors.push(\"rgba(0,102,128,1)\");\r\n                    hBgColors.push(\"rgba(0,102,128,0.4)\");\r\n                    hBrdrColors.push(\"rgba(0,102,128,1)\");\r\n                  }\r\n                });\r\n\r\n                orderedSwaps.push({\r\n                  labels: newInit,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Swapped to Right of Pivot\",\r\n                      backgroundColor: bgColors,\r\n                      borderColor: brdrColors,\r\n                      borderWidth: 1,\r\n                      hoverBackgroundColor: hBgColors,\r\n                      hoverBorderColor: hBrdrColors,\r\n                      data: newInit\r\n                    }\r\n                  ]\r\n                });\r\n\r\n                bgColors = [];\r\n                brdrColors = [];\r\n                hBgColors = [];\r\n                hBrdrColors = [];\r\n              }\r\n            }\r\n\r\n            let last = newArr.concat(quickSort(left), pivot, quickSort(right));\r\n            //console.log(\"last:\", last);\r\n\r\n            initialArr.forEach(() => {\r\n              bgColors.push(\"rgba(0,102,128,0.2)\");\r\n              brdrColors.push(\"rgba(0,102,128,1)\");\r\n              hBgColors.push(\"rgba(0,102,128,0.4)\");\r\n              hBrdrColors.push(\"rgba(0,102,128,1)\");\r\n            });\r\n\r\n            orderedSwaps.push({\r\n              labels: last,\r\n              datasets: [\r\n                {\r\n                  label: \"Left + Pivot + Right\",\r\n                  backgroundColor: bgColors,\r\n                  borderColor: brdrColors,\r\n                  borderWidth: 1,\r\n                  hoverBackgroundColor: hBgColors,\r\n                  hoverBorderColor: hBrdrColors,\r\n                  data: last\r\n                }\r\n              ]\r\n            });\r\n\r\n            bgColors = [];\r\n            brdrColors = [];\r\n            hBgColors = [];\r\n            hBrdrColors = [];\r\n\r\n            return last;\r\n          }\r\n        };\r\n\r\n        quickSort(dataCopy);\r\n        this.visualize(data, sortType, orderedSwaps, ms);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { data, sortingActive, numbers } = this.state;\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <VisualData data={data} />\r\n        <Options\r\n          sortingActive={sortingActive}\r\n          numbers={numbers}\r\n          handleNumberChange={this.handleNumberChange}\r\n          handleNumberSubmit={this.handleNumberSubmit}\r\n          handleSortTypeChange={this.handleSortTypeChange}\r\n          handleSortSpeedChange={this.handleSortSpeedChange}\r\n          handleSortSubmit={this.handleSortSubmit}\r\n          handleReset={this.handleReset}\r\n          handleStop={this.handleStop}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}